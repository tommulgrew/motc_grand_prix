// Structures

struct GameConfig {
    float controllerDeadzone;
    float controllerSmoothing;
    float controllerCurve;      // 1 = linear. 2 = x^2 etc.
    float controllerFactor;
    float drawDistance;
    bool showRacingLine;
    int playerColour;           // Index into playerCarPalettes array
    int difficulty;
    int trackIndex;
}

// Data

GameConfig gameConfig = new GameConfig {
    
    // Best for gamepads
    controllerDeadzone = 0.06,
    controllerSmoothing = 0.9,
    controllerCurve = 2,

    // Best for touch screen controls
    // controllerDeadzone = 0,
    // controllerSmoothing = 0,
    // controllerCurve = 1.5,

    controllerFactor = 1.1,
    drawDistance = 80,
    showRacingLine = true,
    playerColour = 3,
    difficulty = 1,
    trackIndex = 0
};

string configFilename() {
    return savedir() + "motgpconfig.txt";
}

void loadGameConfig() {
    string configFile = configFilename();
    log("Loading config from: " + configFile + "\n");
    if (not fileexists(configFile)) {
        log("No file found. Using default config.");
        return;
    }

    string text = loadtext(configFile);
    string[] lines = split(text, "\n");
    int i = 0;
    gameConfig.controllerDeadzone = tofloat(lines[i]); i++;
    gameConfig.controllerSmoothing = tofloat(lines[i]); i++;
    gameConfig.controllerCurve = tofloat(lines[i]); i++;
    gameConfig.controllerFactor = tofloat(lines[i]); i++;
}

void saveConfig() {
    string configFile = configFilename();
    log("Saving config to: " + configFile + "\n");

    string text = 
        gameConfig.controllerDeadzone + "\n" + 
        gameConfig.controllerSmoothing + "\n" +
        gameConfig.controllerCurve + "\n" +
        gameConfig.controllerFactor;
    savetext(configFile, text);
}
