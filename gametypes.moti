#include "library/trig"

struct DifficultyLevel;

struct RaceParams {
    Track track;
    int laps;
    DifficultyLevel difficulty;
    int[] aiCarRoster;
    bool isPracticeMode;
    int playerColour;           // Index into playerCarPalettes array
    bool isDemo;
}

struct FloatRange {
    float min, max;
}

struct DifficultyLevel {
    string name;
    float baseFactorOffset;
    FloatRange velocityFactorRange;
    FloatRange maxVelocityRange;
    float steeringSmoothing;
    float wander;
    float lookAhead;
    bool applyDontBrake;            // Whether to apply the "don't brake" flag if set on a corner

    float velocityFactorVariance;
    float maxVelocityVariance;
    float steeringSmoothingVariance;
    float wanderVariance;
    int lookAheadVariance;
}

struct CarAIParams {
    float velocityFactor;
    float maxVelocity;
    float steeringSmoothing;
    float wander;
    int wanderPeriod;
    int lookAhead;
}

struct CarAIState {
    float aiXOffset;
    float wanderOffset;
    int rndCounter;
    CarAIParams aiParams, baseAIParams;
}

struct CarInput {
    float accel;                // -1 to 1. +ve = accel, -ve = brake
    float steering;             // -1 to 1.
    float keyboardSteering;     // Keyboard steering (includes game controller dpad steering)
    float controllerSteering;   // Game controller analogue steering
}

struct CarAnimation {
    float wheelTurn, wheelPrev;
    float revs;
    float prevVel, suspension;
}

struct CarRaceState {
    int lap;
    bool isFinished;
    int raceTime, lastLapTime, currentLapTime, bestLapTime;      // All times are stored as frame counts (frame = 1/30 second)
}

struct Car {
    int carIndex;
    Vec pos;
    float turn, pitch;
    float vel, xd;
    float relZ;
    float rearViewZ;            // Rear view mirror Z
    string name;
    CarInput input;
    CarAnimation anim;
    CarRaceState race;
    CarAIState aiState;
}
