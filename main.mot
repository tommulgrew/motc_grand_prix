#title Mot Grand Prix
#executable motgp
#webtemplate driving
#file assets/textures.png
#file assets/titlebackground.png
#file assets/titlecar.png
#file assets/titlemots.png
#file assets/titletext.png
#file assets/music/title.ogg
#file assets/sfx/getready.wav
#file assets/sfx/go.wav
#file assets/sfx/lapbell.wav
#file assets/sfx/crash1.wav
#file assets/sfx/crash2.wav
#file assets/sfx/crash3.wav
#file assets/sfx/groundslide.wav
#file assets/sfx/roadslide.wav
#file assets/sfx/engine1.wav
#file assets/sfx/engine2.wav

#include "library/trig"
#include "library/colour"
#include "assets"
#include "tracks"
#include "models"
#include "gameconfig"
#include "gameplay"
#include "world"
#include "rendergame"
#include "mainmenu"
#include "pausemenu"
#include "app"

// Routines

void draw();
void update();

loadGameConfig();
loadTournament();
setScreenSize(screenResolutions[gameConfig.screenResIndex]);

UIInput uiInput = makeUIInput();

// Setup screen buffer
screenscale(SCALE_FIT);
screen(makeimg(SCREEN_WIDTH, SCREEN_HEIGHT));

// Start in menu mode
setGameMode(GAMEMODE_MENU);

// Main loop
while (not quitApp) {
	if (interval(1000 / 30, 3)) {
		update();
		frame++;	
	}
	else {
		draw();

		// color(7);
		// print("GC:       " + stat(MEMORY_GCCOUNT), 1, 50); print("");
		// print("GC Full:  " + stat(MEMORY_FULLGCCOUNT));
		// print("Heap used:" + stat(MEMORY_LASTGCHEAPUSED) + " " + ((stat(MEMORY_LASTGCHEAPUSED) * 100) / stat(MEMORY_HEAPSIZE)) + "%");
		// print(hostplatform());

		if (isFadeInScheduled) {
			fadeIn(colourPalette);
			isFadeInScheduled = false;
		}

		flip();
	}
}

void setGameMode(int mode) {
	if (gameMode != mode) {
		stopsfx();
		if (gameMode != 0) {			// Not just starting game
			doFadeOut();
		}
		stopmusic();
		gameMode = mode;
		if (gameMode = GAMEMODE_MENU) initMainMenu();
		else if (gameMode = GAMEMODE_RACE) initRace();
		else assert(false, "Unknown game mode");
		isFadeInScheduled = true;
	}
}

void draw() {
	if (gameMode = GAMEMODE_MENU) drawMainMenu();
	else if (gameMode = GAMEMODE_RACE) {
		drawGame();
		if (pauseMenu.isActive) {
			drawPauseMenu();
		}
	}
}

void update() {
	updateUIInput(uiInput, frame);
	if (gameMode = GAMEMODE_MENU) updateMainMenu(uiInput);
	else if (gameMode = GAMEMODE_RACE) {
		updatePauseMenu(uiInput);
		if (not pauseMenu.isActive) {
			updateGame(uiInput);
		}
	}
}
