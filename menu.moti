#include "render"
#include "app"

// Constants

// Menu button enum
const int MB_UP             = 0;
const int MB_DOWN           = 1;
const int MB_LEFT           = 2;
const int MB_RIGHT          = 3;
const int MB_SELECT         = 4;
const int MB_STICK_UP       = 5;
const int MB_STICK_DOWN     = 6;
const int MB_STICK_LEFT     = 7;
const int MB_STICK_RIGHT    = 8;

// Structures

struct MenuInput {
    bool[] btnDown;
    bool[] btnPressed;
}

struct MenuState {
    int y;
    float animY;
    bool stickDown, stickUp, stickLeft, stickRight;
    bool btnDown, btnUp, btnLeft, btnRight;
    bool select;
    MenuInput input;
}

MenuState menu;

// Routines

void initMenu() {
    menu = new MenuState {
        input = new MenuInput {
            btnDown = new bool[9],        
            btnPressed = new bool[9]
        }
    };
}

void updateMenuInput(MenuInput input) {
    bool[] btnDown = new bool[9];

    // Button down state
    btnDown[MB_UP]     = btn(BTN_UP)    or keydn(KEY_UP);
    btnDown[MB_DOWN]   = btn(BTN_DOWN)  or keydn(KEY_DOWN);
    btnDown[MB_LEFT]   = btn(BTN_LEFT)  or keydn(KEY_LEFT);
    btnDown[MB_RIGHT]  = btn(BTN_RIGHT) or keydn(KEY_RIGHT);
    btnDown[MB_SELECT] = btn(BTN_A) or keydn(KEY_RETURN) or keydn(KEY_SPACE) or keydn("z");

    // Controller analogue stick navigation.
    // Stick must be moved past 0.6 to trigger press and back past 0.3 to trigger release.
    // This prevents jittery devices from triggering false presses.
    float ax = axis(AX_X), ay = axis(AX_Y);
    btnDown[MB_STICK_UP]    = ay < (input.btnDown[MB_STICK_UP]    ? -0.3 : -0.6);
    btnDown[MB_STICK_DOWN]  = ay < (input.btnDown[MB_STICK_DOWN]  ?  0.3 :  0.6);
    btnDown[MB_STICK_LEFT]  = ax < (input.btnDown[MB_STICK_LEFT]  ? -0.3 : -0.6);
    btnDown[MB_STICK_RIGHT] = ax < (input.btnDown[MB_STICK_RIGHT] ?  0.3 :  0.6);

    // Calculate button pressed states
    for (int i = 0; i < btnDown.length; i++) {
        input.btnPressed[i] = btnDown[i] and not input.btnDown[i];
        input.btnDown[i] = btnDown[i];
    }
}

float getMenuScreenY(float y) {
    return SCREEN_HEIGHT / 2 + (20 + y * 30) * PRATIO;
}

float getMenuTextY(float y) {
    return getMenuScreenY(y) + 10 * PRATIO - 4;
}

void printCentered(string text, float y, bool isSelected) {
    int x = SCREEN_WIDTH / 2 - (text.length * 6) / 2;
    if (isSelected and frame % 10 < 5) {
        color(6);
    }
    else {
        color(5);
    }
    print(text, x, y);
}

void drawMenu() {
    cls(1);

    // Draw selection bar
    float screenY = getMenuScreenY(menu.animY);
    float h = 20 * PRATIO;
    color(7);
    rectfill(0, screenY, SCREEN_WIDTH, screenY + h);
    color(12);
    rect(-1, screenY, SCREEN_WIDTH + 1, screenY + h);

    // Draw menu options
    printCentered(
        "Track: " + tracks[gameConfig.trackIndex].name, 
        getMenuTextY(0), 
        menu.y = 0);

    printCentered(
        "Difficulty: " + difficultyLevels[gameConfig.difficulty].name,
        getMenuTextY(1),
        menu.y = 1);

    printCentered(
        "!! Race !!",
        getMenuTextY(2),
        menu.y = 2);
}

void updateMenu() {
    MenuInput input = menu.input;
    updateMenuInput(input);

    // Button navigation
    int yd = 0, xd = 0;
    if (input.btnPressed[MB_UP]    or input.btnPressed[MB_STICK_UP])    yd--;
    if (input.btnPressed[MB_DOWN]  or input.btnPressed[MB_STICK_DOWN])  yd++;
    if (input.btnPressed[MB_LEFT]  or input.btnPressed[MB_STICK_LEFT])  xd--;
    if (input.btnPressed[MB_RIGHT] or input.btnPressed[MB_STICK_RIGHT]) xd++;

    // Up/down selects menu option
    menu.y = clamp(menu.y + yd, 0, 2);
    menu.animY += clamp(menu.y - menu.animY, -0.1, 0.1);

    // Left right cycles track/difficulty
    if (xd != 0) {
        if (menu.y = 0) {
            int index = gameConfig.trackIndex + xd;
            if (index >= 0 and index < tracks.length) {
                gameConfig.trackIndex = index;
                // TODO: SFX
            }
        }
        else if (menu.y = 1) {
            int index = gameConfig.difficulty + xd;
            if (index >= 0 and index < difficultyLevels.length) {
                gameConfig.difficulty = index;
                // TODO: SFX
            }
        }
    }

    // Button starts game
    if (input.btnPressed[MB_SELECT] and menu.y = 2) {
        // TODO: SFX
        setGameMode(GAMEMODE_RACE);
    }
}