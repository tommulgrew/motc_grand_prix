#include "menu"
#include "render"
#include "gameconfig"

// Constants

// Pause menu item enums

const int PAUSE_RESUME = 1;
const int PAUSE_QUIT = 2;

// Structures

struct PauseMenuState {
    bool isActive;
    MenuState state;
}

// Data

MenuParams pauseMenuParams = new MenuParams {
    y = SCREEN_HEIGHT / 2,
    itemSpacing = 30,
    drawBackground = true,
    backgroundColour = 1,
    borderColour = 7,
    backgroundPadding = 15
};
PauseMenuState pauseMenu = new PauseMenuState { 
    state = new MenuState 
};

// Routines

MenuItem[] getPauseMenuItems();

void updatePauseMenu(UIInput input) {
    if (pauseMenu.isActive) {

        // Items
        MenuItem[] items = getPauseMenuItems();

        // Update menu
        MenuAction action = updateMenu(pauseMenu.state, items, input);

        // Perform menu action
        if (action != null) {
            if (action.menuAction = MENU_ACTION_SELECT) {
                if (action.itemID = PAUSE_QUIT) {
                    pauseMenu.isActive = false;
                    setGameMode(GAMEMODE_MENU);
                }
                else if (action.itemID = PAUSE_RESUME) {
                    pauseMenu.isActive = false;
                }
            }
        }

        // Pressing pause again exits the pause menu
        if (input.btnPressed[UI_PAUSE]) {
            pauseMenu.isActive = false;
        }
    }
    else {
        // Pressing pause displays pause menu
        if (input.btnPressed[UI_PAUSE]) {
            pauseMenu.isActive = true;
            pauseMenu.state = new MenuState;
        }
    }
}

void drawPauseMenu() {
    MenuItem[] items = getPauseMenuItems();
    drawMenu(pauseMenuParams, pauseMenu.state, items);
}

MenuItem[] getPauseMenuItems() {
    return new MenuItem[] {
        new MenuItem { id = PAUSE_QUIT, text = "Quit race" },
        new MenuItem { id = PAUSE_RESUME, text = "Resume" }
    };
}
