#include "menu"
#include "render"
#include "gameconfig"

// Constants

// Pause menu item enums

const int PAUSE_RESUME = 1;
const int PAUSE_CONTROLLER = 2;
const int PAUSE_QUIT = 3;
const int PAUSE_CONTROLLER_DEADZONE = 4;
const int PAUSE_CONTROLLER_SMOOTHING = 5;
const int PAUSE_CONTROLLER_CURVE = 6;
const int PAUSE_CONTROLLER_FACTOR = 7;
const int PAUSE_CONTROLLER_BACK = 8;

// Pause submenu

const int PAUSE_MENU_MAIN = 1;
const int PAUSE_MENU_CONTROLLER = 2;

// Structures

struct PauseMenuState {
    bool isActive;
    int subMenu;
    MenuState state;
}

// Data

MenuParams pauseMenuParams = new MenuParams {
    y = SCREEN_HEIGHT / 2,
    itemSpacing = 20,
    drawBackground = true,
    backgroundColour = 1,
    borderColour = 7,
    backgroundPadding = 15
};
PauseMenuState pauseMenu = new PauseMenuState { 
    state = new MenuState,
    subMenu = PAUSE_MENU_MAIN
};

// Routines

MenuItem[] getPauseMenuItems();

void updatePauseMenu(UIInput input) {
    if (pauseMenu.isActive) {

        // Items
        MenuItem[] items = getPauseMenuItems();

        // Update menu
        MenuAction action = updateMenu(pauseMenu.state, items, input);

        // Perform menu action
        if (action != null) {
            if (action.menuAction = MENU_ACTION_SELECT) {
                if (action.itemID = PAUSE_QUIT) {
                    pauseMenu.isActive = false;
                    setGameMode(GAMEMODE_MENU);
                }
                else if (action.itemID = PAUSE_RESUME) {
                    pauseMenu.isActive = false;
                }
                else if (action.itemID = PAUSE_CONTROLLER) {
                    pauseMenu.subMenu = PAUSE_MENU_CONTROLLER;
                    pauseMenu.state = new MenuState;
                }
                else if (action.itemID = PAUSE_CONTROLLER_BACK) {
                    pauseMenu.subMenu = PAUSE_MENU_MAIN;
                    pauseMenu.state = new MenuState;
                }
            }
            else if (action.menuAction = MENU_ACTION_CHANGE) {
                if (action.itemID = PAUSE_CONTROLLER_DEADZONE) {
                    gameConfig.controllerDeadzone = clamp(gameConfig.controllerDeadzone + action.delta * 0.01, 0, 0.5);
                }
                else if (action.itemID = PAUSE_CONTROLLER_SMOOTHING) {
                    gameConfig.controllerSmoothing = clamp(gameConfig.controllerSmoothing + action.delta * 0.05, 0, 0.95);
                }
                else if (action.itemID = PAUSE_CONTROLLER_CURVE) {
                    gameConfig.controllerCurve = clamp(gameConfig.controllerCurve + action.delta * 0.1, 1, 3);
                }
                else if (action.itemID = PAUSE_CONTROLLER_FACTOR) {
                    gameConfig.controllerFactor = clamp(gameConfig.controllerFactor + action.delta * 0.02, 1, 2);
                }
            }
        }

        // Pressing pause again exits the pause menu
        if (input.btnPressed[UI_PAUSE]) {
            pauseMenu.isActive = false;
        }
    }
    else {
        // Pressing pause displays pause menu
        if (input.btnPressed[UI_PAUSE]) {
            pauseMenu.isActive = true;
            pauseMenu.state = new MenuState;
        }
    }
}

void drawPauseMenu() {
    MenuItem[] items = getPauseMenuItems();
    drawMenu(pauseMenuParams, pauseMenu.state, items);
}

MenuItem[] getPauseMenuItems() {
    if (pauseMenu.subMenu = PAUSE_MENU_MAIN) {
        return new MenuItem[] {
            new MenuItem { id = PAUSE_RESUME, text = "Resume" },
            new MenuItem { id = PAUSE_CONTROLLER, text = "Controller options..." },
            new MenuItem { id = PAUSE_QUIT, text = "Quit race" }
        };
    }
    else if (pauseMenu.subMenu = PAUSE_MENU_CONTROLLER) {
        return new MenuItem[] {
            new MenuItem { id = PAUSE_CONTROLLER_DEADZONE, text = "Deadzone: " + gameConfig.controllerDeadzone, showBar = true, value = gameConfig.controllerDeadzone, fraction = gameConfig.controllerDeadzone / 0.2 },
            new MenuItem { id = PAUSE_CONTROLLER_SMOOTHING, text = "Smoothing: " + gameConfig.controllerSmoothing },
            new MenuItem { id = PAUSE_CONTROLLER_CURVE, text = "Response curve: " + gameConfig.controllerCurve },
            new MenuItem { id = PAUSE_CONTROLLER_FACTOR, text = "Sensitivity: " + gameConfig.controllerFactor },
            new MenuItem { id = PAUSE_CONTROLLER_BACK, text = "Back" }
        };
    }
}
