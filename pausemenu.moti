#include "menu"
#include "render"
#include "gameconfig"

// Constants

// Pause menu item enums

const int PAUSE_RESUME = 1;
const int PAUSE_CONTROLLER = 2;
const int PAUSE_QUIT = 3;
const int PAUSE_CAR_COLOUR = 4;
const int PAUSE_RACING_LINE = 5;
const int PAUSE_GRAPHICS = 6;
const int PAUSE_SKIP_QUALIFIER = 7;

const int PAUSE_CONTROLLER_DEADZONE = 8;
const int PAUSE_CONTROLLER_SMOOTHING = 9;
const int PAUSE_CONTROLLER_CURVE = 10;
const int PAUSE_CONTROLLER_FACTOR = 11;
const int PAUSE_CONTROLLER_BACK = 12;

const int PAUSE_GRAPHICS_DRAWDIST = 13;
const int PAUSE_GRAPHICS_RESOLUTION = 14;

// Pause submenu

const int PAUSE_MENU_MAIN = 1;
const int PAUSE_MENU_CONTROLLER = 2;
const int PAUSE_MENU_GRAPHICS = 3;

// Structures

struct PauseMenuState {
    bool isActive;
    int subMenu;
    MenuState state;
}

// Data

MenuParams pauseMenuParams = new MenuParams {
    y = SCREEN_HEIGHT / 2,
    itemSpacing = 16,
    barHeight = 16,
    drawBackground = true,
    backgroundColour = 1,
    borderColour = 7,
    backgroundPadding = 15
};
PauseMenuState pauseMenu = new PauseMenuState { 
    state = new MenuState,
    subMenu = PAUSE_MENU_MAIN
};

// Routines

MenuItem[] getPauseMenuItems();

void openPauseMenu() {
    pauseMenu.isActive = true;
    pauseMenu.state = new MenuState;
    setvolume(0, 0);
    setvolume(1, 0);
}

void closePauseMenu() {
    saveConfig();
    pauseMenu.isActive = false;
    setvolume(0, 1);
    setvolume(1, 1);
}

void updatePauseMenu(UIInput input) {
    if (pauseMenu.isActive) {

        // Items
        MenuItem[] items = getPauseMenuItems();

        // Update menu
        MenuAction action = updateMenu(pauseMenu.state, items, input);

        // Perform menu action
        if (action != null) {
            if (action.menuAction = MENU_ACTION_SELECT) {
                if (action.itemID = PAUSE_QUIT) {
                    closePauseMenu();
                    setGameMode(GAMEMODE_MENU);
                }
                else if (action.itemID = PAUSE_RESUME) {
                    closePauseMenu();
                }
                else if (action.itemID = PAUSE_RACING_LINE) {
                    gameConfig.showRacingLine = not gameConfig.showRacingLine;
                }
                else if (action.itemID = PAUSE_CONTROLLER) {
                    pauseMenu.subMenu = PAUSE_MENU_CONTROLLER;
                    pauseMenu.state = new MenuState;
                }
                else if (action.itemID = PAUSE_GRAPHICS) {
                    pauseMenu.subMenu = PAUSE_MENU_GRAPHICS;
                    pauseMenu.state = new MenuState;
                }
                else if (action.itemID = PAUSE_CONTROLLER_BACK) {
                    pauseMenu.subMenu = PAUSE_MENU_MAIN;
                    pauseMenu.state = new MenuState;
                }
                else if (action.itemID = PAUSE_SKIP_QUALIFIER) {
                    closePauseMenu();
                    skipQualificationLap();
                }
            }
            else if (action.menuAction = MENU_ACTION_CHANGE) {
                if (action.itemID = PAUSE_CAR_COLOUR) {
                    gameConfig.playerColour = clamp(gameConfig.playerColour + action.delta, 0, playerCarPalettes.length - 1);
                    race.playerColour = gameConfig.playerColour;
                }
                else if (action.itemID = PAUSE_CONTROLLER_DEADZONE) {
                    gameConfig.controllerDeadzone = clamp(gameConfig.controllerDeadzone + action.delta * 0.01, 0, 0.5);
                }
                else if (action.itemID = PAUSE_CONTROLLER_SMOOTHING) {
                    gameConfig.controllerSmoothing = clamp(gameConfig.controllerSmoothing + action.delta * 0.05, 0, 0.95);
                }
                else if (action.itemID = PAUSE_CONTROLLER_CURVE) {
                    gameConfig.controllerCurve = clamp(gameConfig.controllerCurve + action.delta * 0.1, 1, 3);
                }
                else if (action.itemID = PAUSE_CONTROLLER_FACTOR) {
                    gameConfig.controllerFactor = clamp(gameConfig.controllerFactor + action.delta * 0.05, 1, 2);
                }
                else if (action.itemID = PAUSE_RACING_LINE) {
                    gameConfig.showRacingLine = action.delta > 0;
                }
                else if (action.itemID = PAUSE_GRAPHICS_DRAWDIST) {
                    gameConfig.drawDistance = clamp(gameConfig.drawDistance + action.delta * 5, 30, 150);
                }
                else if (action.itemID = PAUSE_GRAPHICS_RESOLUTION) {
                    gameConfig.screenResIndex = clamp(gameConfig.screenResIndex + action.delta, 0, screenResolutions.length - 1);
                    setScreenSize(screenResolutions[gameConfig.screenResIndex]);
                }
            }
        }

        // Pressing pause again exits the pause menu
        if (input.btnPressed[UI_PAUSE]) {
            closePauseMenu();
        }
    }
    else {
        // Pressing pause displays pause menu
        if (input.btnPressed[UI_PAUSE]) {
            openPauseMenu();
        }
    }
}

void drawPauseMenu() {
    MenuItem[] items = getPauseMenuItems();
    drawMenu(pauseMenuParams, pauseMenu.state, items);
}

MenuItem[] getPauseMenuItems() {
    if (pauseMenu.subMenu = PAUSE_MENU_MAIN) {
        MenuItem[] items = new MenuItem[] {
            new MenuItem { id = PAUSE_RESUME, text = "Resume" }
        };

        if (race.isQualificationLap and (raceMode = RACEMODE_PRERACE or raceMode = RACEMODE_RACING)) {
            items.add(new MenuItem { id = PAUSE_SKIP_QUALIFIER, text = "Skip qualification lap" });
        }

        items.add(new MenuItem { id = PAUSE_RACING_LINE, text = "Racing line: " + (gameConfig.showRacingLine ? "ON" : "OFF" ) });
        items.add(new MenuItem { id = PAUSE_CAR_COLOUR, text = "Car colour: " + (gameConfig.playerColour + 1) });
        items.add(new MenuItem { id = PAUSE_CONTROLLER, text = "Controller options..." });
        items.add(new MenuItem { id = PAUSE_GRAPHICS, text = "Graphics options..." });
        items.add(new MenuItem { id = PAUSE_QUIT, text = "Quit race", confirm = true });

        return items;
    }
    else if (pauseMenu.subMenu = PAUSE_MENU_CONTROLLER) {
        return new MenuItem[] {
            new MenuItem { id = PAUSE_CONTROLLER_DEADZONE, text = "Deadzone", showBar = true, valueText = toint(gameConfig.controllerDeadzone * 100) + "%", fraction = gameConfig.controllerDeadzone / 0.5 },
            new MenuItem { id = PAUSE_CONTROLLER_SMOOTHING, text = "Smoothing", showBar = true, valueText = formatFloat(gameConfig.controllerSmoothing), fraction = gameConfig.controllerSmoothing / 0.95 },
            new MenuItem { id = PAUSE_CONTROLLER_CURVE, text = "Response curve", showBar = true, valueText = formatFloat(gameConfig.controllerCurve - 1), fraction = (gameConfig.controllerCurve - 1) / 2.0 },
            new MenuItem { id = PAUSE_CONTROLLER_FACTOR, text = "Sensitivity", showBar = true, valueText = formatFloat(gameConfig.controllerFactor), fraction = gameConfig.controllerFactor - 1 },
            new MenuItem { id = PAUSE_CONTROLLER_BACK, text = "Back" }
        };
    }
    else if (pauseMenu.subMenu = PAUSE_MENU_GRAPHICS) {
        Vec res = screenResolutions[gameConfig.screenResIndex];
        return new MenuItem[] {
            new MenuItem { id = PAUSE_GRAPHICS_DRAWDIST, text = "Draw distance", showBar = true, valueText = gameConfig.drawDistance, fraction = (gameConfig.drawDistance - 30) / 120.0 },
            new MenuItem { id = PAUSE_GRAPHICS_RESOLUTION, text = "Resolution: " + toint(res.x) + "x" + toint(res.y) },
            new MenuItem { id = PAUSE_CONTROLLER_BACK, text = "Back" }
        };
    }
}
