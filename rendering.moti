#include "tracks"
#include "gamedata"
#include "routines"

// Constants

const int DRAW_DISTANCE = 40;
const float CAMERA_TILT = 0.175;
const int SCREEN_WIDTH = 320;
const int SCREEN_HEIGHT = 240;
const float NEAR_Z = 0.1;
const float SCREEN_DIST = SCREEN_WIDTH / 2;      // Used for projection calculations

// Structures

struct ScreenSpaceSegment {
    WorldSegment segment;
    Vec pos;
    float turn, pitch;
    float clipY;
    int zIndex, index;
}

// Data

Vec playerCameraOffset = new Vec {
    y = -0.6
};

// Routines

void drawWorld(Vec cameraPos, float cameraTurn, float cameraPitch, int drawDistance, Track track);

void drawGame(Track track) {
    drawWorld(
        player.pos + playerCameraOffset, 
        player.turn, 
        player.pitch, 
        DRAW_DISTANCE, 
        track);
}

Vec project(Vec pt) {
    if (pt.z >= NEAR_Z) {
        float scale = SCREEN_DIST / pt.z;
        return new Vec { 
            x = pt.x * scale + SCREEN_WIDTH / 2,
            y = pt.y * scale + SCREEN_HEIGHT / 2,
            z = scale
        };
    }
    else {
        return null;
    }
}

ScreenSpaceSegment[] getScreenSpaceSegments(Vec cameraPos, float cameraTurn, float cameraPitch, int drawDistance) {
    ScreenSpaceSegment[] screenSegs = new ScreenSpaceSegment[0];

    // Current world segment
    int zIndex = floor(cameraPos.z);
    WorldSegment cameraSegment = world[zIndex % world.length];

    // Road drawing cursor
    float turn = -cameraTurn, pitch = cameraSegment.pitch - cameraPitch - CAMERA_TILT;
    float clipY = SCREEN_HEIGHT;

    // Calculate initial position
    Vec skewedCameraPos = skew(new Vec { 
        x = cameraPos.x,
        y = cameraPos.y, 
        z = cameraPos.z - zIndex        // Distance from start of segment
    }, turn, pitch);
    Vec pos = -skewedCameraPos;

    // Generate screen segment
    for (int i = 0; i < drawDistance; i++) {
        WorldSegment segment = world[(zIndex + i) % world.length];
        pitch = segment.pitch - cameraPitch - CAMERA_TILT;
        Vec horizonPt = project(pos);
        if (horizonPt != null) clipY = min(horizonPt.y, clipY);
        screenSegs.add(new ScreenSpaceSegment {
            segment = segment,
            pos = pos,
            turn = turn,
            pitch = pitch,
            clipY = ceil(clipY),
            zIndex = zIndex + i,
            index = i
        });

        // Update position for next screen segment
        pos = pos + new Vec { x = turn, y = pitch, z = 1 };
        turn += segment.turn;
    }

    return screenSegs;
}

void drawHorizon(ScreenSpaceSegment[] screenSegs, Track track, float cameraTurn, float cameraPitch) {
    tran(-1);

    float drawHorizonX = horizonX - cameraTurn * SCREEN_DIST;
    float drawHorizonY = SCREEN_HEIGHT / 2 - (cameraPitch * CAMERA_TILT) * SCREEN_DIST + 4;

    ScreenSpaceSegment lastSegment = screenSegs[screenSegs.length - 1];
    float groundY = min(lastSegment.clipY, drawHorizonY + 8);
    
    color(track.skyColour);
    rectfill(0, 0, SCREEN_WIDTH, groundY - 1);
    color(track.groundColour);
    rectfill(0, groundY - 1, SCREEN_WIDTH, SCREEN_HEIGHT);
}

void drawQuadHoriz(
    Texture texture,
    float width,
    Vec nearPos,
    Vec farPos,
    float v0, 
    float v1) {
    
}

void drawQuadVert(
    Texture texture,
    float height,
    Vec nearPos,
    Vec farPos,
    float u0,
    float u1) {
    
}

void drawQuadFront(
    Texture texture,
    float width,
    float height,
    Vec pos,
    bool flipX) {
    
}

void drawScreenSpaceSegments(ScreenSpaceSegment[] screenSegs) {
    // Draw segments in reverse order
    for (int i = screenSegs.length - 2; i >= 0; i--) {
        ScreenSpaceSegment screenSeg = screenSegs[i];
        ScreenSpaceSegment nextScreenSeg = screenSegs[i + 1];

        // TODO: Clipping!

        // Draw model instance cross sections for this segment
        WorldSegment segment = screenSeg.segment;
        for (ModelInstance instance : segment.modelInstances) {
            Model model = instance.model;

            // Position of start and end of polygon
            Vec segPosOffset = new Vec;
            if (instance.ref = REF_LEFT)  segPosOffset.x += segment.left;
            if (instance.ref = REF_RIGHT) segPosOffset.x += segment.right;
            Vec polyPos0 = screenSeg.pos     + instance.pos + segPosOffset;
            Vec polyPos1 = nextScreenSeg.pos + instance.pos + segPosOffset;

            // Clip if outside screen horizontal range.
            // Note: This assumes a 90 degree horizontal FOV.
            float xLimit = -screenSeg.pos.z;         
            if (polyPos0.x + model.maxX < -xLimit and polyPos1.x + model.maxX < -xLimit) continue;
            if (polyPos0.x + model.minX >  xLimit and polyPos1.x + model.minX >  xLimit) continue;

            // Find model segment
            int instanceZ = instance.pos.z;
            int modelSegmentIndex = (screenSeg.zIndex - instanceZ) % world.length;
            ModelSegment modelSegment = instance.length > 0
                ? model.segments[0]                         // Single segment model stretched over a specified length
                : model.segments[modelSegmentIndex];
            
            // Draw segment polygons
            for (ModelPoly poly : modelSegment.horizPolys) {

                // Texture coordinates
                Texture texture = poly.texture;
                float v0 = modelSegmentIndex * 1.0 / texture.h;
                v0 -= floor(v0);        // Repeat
                float v1 = v0 + 1.0 / texture.h;

                // Draw polygon
                Vec polyOffset = new Vec { x = poly.pos.x, y = poly.pos.y };
                drawQuadHoriz(
                    texture, 
                    poly.size.x, 
                    polyPos0 + polyOffset,
                    polyPos1 + polyOffset,
                    v0, v1);
            }

            for (ModelPoly poly : modelSegment.vertPolys) {

                // Texture coordinates
                Texture texture = poly.texture;
                float u0 = modelSegmentIndex * 1.0 / texture.w;
                u0 -= floor(u0);
                float u1 = u0 + 1.0 / texture.w;

                // Draw polygon
                Vec polyOffset = new Vec { x = poly.pos.x, y = poly.pos.y };
                drawQuadVert(
                    texture,
                    poly.size.y,
                    polyPos0 + polyOffset,
                    polyPos1 + polyOffset,
                    u0, u1);
            }

            for (ModelPoly poly : modelSegment.frontPolys) {
                Texture texture = poly.texture;
                Vec polyOffset = new Vec { x = poly.pos.x, y = poly.pos.y };
                drawQuadFront(
                    texture,
                    poly.size.x,
                    poly.size.y,
                    polyPos0 + polyOffset,
                    false);
            }
        }

        // TODO: Racing line

        // TODO: Other cars
    }
}

void drawWorld(Vec cameraPos, float cameraTurn, float cameraPitch, int drawDistance, Track track) {
    ScreenSpaceSegment[] screenSegs = getScreenSpaceSegments(cameraPos, cameraTurn, cameraPitch, drawDistance);
    drawHorizon(screenSegs, track, cameraTurn, cameraPitch);
    drawScreenSpaceSegments(screenSegs);
}
