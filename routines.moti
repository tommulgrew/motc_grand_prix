#include "library/trig"

struct Transform {
    Vec translate;
    float skewX, skewY;
}

Vec skew(Vec pos, float xd, float yd) {
    return new Vec {
        x = pos.x + pos.z * xd,
        y = pos.y + pos.z * yd,
        z = pos.z
    };
}

float lerp(float a, float b, float f) {
    return (1 - f) * a + f * b;
}

Vec operator*(Transform T, Vec v) {
    return T.translate + skew(v, T.skewX, T.skewY);
}

Transform childTransform(Transform T, Vec childPos) {
    return new Transform {
        translate = T.translate + skew(childPos, T.skewX, T.skewY),
        skewX = T.skewX,
        skewY = T.skewY
    };
}

Vec segmentRelativePos(Vec pos) {
    return pos - new Vec { z = floor(pos.z) };      // Position relative to segment
}

int[] makeColMap(int[] srcCols, int[] dstCols) {
    assert(srcCols.length = dstCols.length);
    int[] m = new int[16];

    // Start with identity
    for (int i = 0; i < m.length; i++) {
        m[i] = i;
    }

    // Apply mappings
    for (int i = 0; i < srcCols.length; i++) {
        m[srcCols[i]] = dstCols[i];
    }

    return m;
}