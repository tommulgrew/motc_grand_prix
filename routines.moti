#include "library/trig"

struct Transform {
    Vec translate;
    float skewX, skewY;
}

Vec skew(Vec pos, float xd, float yd) {
    return new Vec {
        x = pos.x + pos.z * xd,
        y = pos.y + pos.z * yd,
        z = pos.z
    };
}

float lerp(float a, float b, float f) {
    return (1 - f) * a + f * b;
}

Vec operator*(Transform T, Vec v) {
    return T.translate + skew(v, T.skewX, T.skewY);
}

Transform childTransform(Transform T, Vec childPos) {
    return new Transform {
        translate = T.translate + skew(childPos, T.skewX, T.skewY),
        skewX = T.skewX,
        skewY = T.skewY
    };
}

int[] makeColMap(int[] srcCols, int[] dstCols) {
    assert(srcCols.length = dstCols.length);
    int[] m = new int[16];

    // Start with identity
    for (int i = 0; i < m.length; i++) {
        m[i] = i;
    }

    // Apply mappings
    for (int i = 0; i < srcCols.length; i++) {
        m[srcCols[i]] = dstCols[i];
    }

    return m;
}

float rnd2(float n) {
    return rnd() * n * 2 - n;
}

void printScaled(string text, int x, int y, int scale) {
    
    // Streamline unscaled text
    if (scale = 1) {
        print(text, x, y);
        return;
    }

    Image mainScreen = screen();

    // Print to buffer
    int w = text.length * 6, h = 8;
    Image buffer = makeimg(w, h);
    screen(buffer);
    print(text, 0, 0);

    screen(mainScreen);

    // Scale to screen
    tran(0);
    scaleimg(buffer, x, y, w * scale, h * scale);
    tran(-1);    
}

string formatFloat(float value, int dp = 2) {
    string text = value;
    int doti = 1;
    while (doti < text.length and substring(text, doti, 1) != ".")
        doti++;
    int length = dp != 0 ? doti + dp + 1 : doti;
    while (text.length < length) {
        text += "0";
    }
    return substring(text, 0, length);
}