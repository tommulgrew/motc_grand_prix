#include "configFile"
#include "routines"

// Structures

struct TournamentCar {
    int carIndex;               // AI car driver index, or -1 for player
    int points;                 // Number of points scored
}

struct TournamentState {
    bool isActive;
    int[] trackOrder;           // Index into "tracks" array
    int raceIndex;             // Index of next track in tournament
    TournamentCar[] cars;
}

TournamentState tournament = new TournamentState {
    isActive = false
};

string tournamentFilename() {
    return savedir() + "mot_gp_tournament.txt";
}

void loadTournament() {
    ConfigFile f = loadConfigFile(tournamentFilename());
    tournament.isActive = readBool(f, false);
    if (not tournament.isActive) return;

    // Load track order
    int trackCount = readInt(f);
    tournament.trackOrder = new int[trackCount];
    for (int i = 0; i < trackCount; i++) {
        tournament.trackOrder[i] = readInt(f);
    }
    tournament.raceIndex = readInt(f);

    // Load cars
    int carCount = readInt(f);
    tournament.cars = new TournamentCar[carCount];
    for (int i = 0; i < carCount; i++) {
        tournament.cars[i] = new TournamentCar {
            carIndex = readInt(f),
            points = readInt(f)
        };
    }
}

void saveTournament() {
    string filename = tournamentFilename();
    log("Saving tournament to: " + filename + "\n");

    // Build text
    string text = tournament.isActive + "\n";
    if (tournament.isActive) {

        // Track order
        text += tournament.trackOrder.length + "\n";
        for (int i : tournament.trackOrder) {
            text += i + "\n";
        }
        text += tournament.raceIndex + "\n";

        // Cars
        text += tournament.cars.length + "\n";
        for (TournamentCar car : tournament.cars) {
            text += car.carIndex + "\n" +
                    car.points + "\n";
        }
    }

    savetext(filename, text);
}

int[] makeAICarRoster(int count) {
    return randomIndices(aiCarNames.length, count);
}

void newTournament() {

    // Setup a new tournament
    tournament = new TournamentState {
        isActive = true,
        cars = new TournamentCar[0],
        trackOrder = randomIndices(tracks.length, tracks.length)
    };

    // AI cars
    int[] carRoster = makeAICarRoster(AI_CAR_COUNT);
    for (int carIndex : carRoster) {
        tournament.cars.add(new TournamentCar {
            carIndex = carIndex
        });
    }

    // Player car
    tournament.cars.add(new TournamentCar { carIndex = -1 });
}

void quitTournament() {

    // Disable tournament
    tournament.isActive = false;
}

void sortTournamentCars() {
    if (not tournament.isActive) return;

    for (int i = 1; i < tournament.cars.length; i++) {
        TournamentCar car = tournament.cars[i];
        int j = i; 
        while (j > 0 and tournament.cars[j - 1].points < car.points) {
            tournament.cars[j] = tournament.cars[j - 1];
            j--;
        }
        tournament.cars[j] = car;
    }
}

int[] racePoints = new int[] { 15, 12, 10, 8, 6, 4, 2, 1 };

void applyRaceResults(Car[] raceResults) {
    if (gameConfig.raceType != RACETYPE_TOURNAMENT) return;

    // Award points
    for (int i = 0; i < raceResults.length; i++) {
        Car car = raceResults[i];

        // Find and update corresponding tournament car
        int carIndex = car = player ? -1 : car.carIndex;
        for (TournamentCar tcar : tournament.cars) {
            if (tcar.carIndex = carIndex) {
                tcar.points += racePoints[i];
                break;
            }
        }
    }
    sortTournamentCars();    

    // Next race
    tournament.raceIndex++;

    saveTournament();
}
